// Prisma schema for API
// Generator and datasource

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl temporarily disabled for auth debugging
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Models
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  bio       String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     BlogPost[]
  projects  Project[]
  userSkills UserSkill[]
  experiences Experience[]
  education  Education[]
}

model Tag {
  id        String      @id @default(cuid())
  slug      String      @unique
  label     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  posts     BlogPostTag[]
  projects  ProjectTag[]
}

model BlogPost {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  excerpt     String?
  content     String        // Markdown/MDX content
  coverImage  String?
  published   Boolean       @default(false)
  publishedAt DateTime?
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tags        BlogPostTag[]
}

model Project {
  id          String       @id @default(cuid())
  slug        String       @unique
  title       String
  description String?
  url         String?
  repoUrl     String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  tags        ProjectTag[]
}

// Join tables for many-to-many with extra flexibility
model BlogPostTag {
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String

  @@id([blogPostId, tagId])
}

model ProjectTag {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([projectId, tagId])
}

// Resume domain models

enum SkillCategory {
  LANGUAGE
  FRAMEWORK
  TOOL
  PLATFORM
  PRACTICE
  OTHER
}

enum SkillProficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Skill {
  id          String           @id @default(cuid())
  name        String           @unique
  category    SkillCategory    @default(OTHER)
  proficiency SkillProficiency @default(INTERMEDIATE)
  order       Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserSkill[]
}

model UserSkill {
  user    User  @relation(fields: [userId], references: [id])
  userId  String
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId String
  note    String?
  order   Int     @default(0)

  @@id([userId, skillId])
}

model Experience {
  id          String               @id @default(cuid())
  user        User                 @relation(fields: [userId], references: [id])
  userId      String
  company     String
  role        String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  summary     String?
  highlights  ExperienceHighlight[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ExperienceHighlight {
  id            String      @id @default(cuid())
  experience    Experience  @relation(fields: [experienceId], references: [id])
  experienceId  String
  order         Int         @default(0)
  text          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  institution String
  degree      String?
  field       String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  gpa         String?
  honors      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
